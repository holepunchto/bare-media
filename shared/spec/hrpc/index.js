// This file is autogenerated by the hrpc compiler
/* eslint-disable camelcase */

import { c, RPC, RPCStream, RPCRequestStream } from 'hrpc/runtime'
import { getEncoding } from './messages.js'

const methods = new Map([
  ['@media/create-preview', 0],
  [0, '@media/create-preview']
])

class HRPC {
  constructor (stream) {
    this._stream = stream
    this._handlers = []
    this._requestEncodings = new Map([
      ['@media/create-preview', getEncoding('@media/create-preview-request')]
    ])
    this._responseEncodings = new Map([
      ['@media/create-preview', getEncoding('@media/create-preview-response')]
    ])
    this._rpc = new RPC(stream, async (req) => {
      const command = methods.get(req.command)
      const responseEncoding = this._responseEncodings.get(command)
      const requestEncoding = this._requestEncodings.get(command)
      if (this._requestIsSend(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null
        await this._handlers[command](request)
        return
      }
      if (!this._requestIsStream(command) && !this._responseIsStream(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null
        const response = await this._handlers[command](request)
        req.reply(c.encode(responseEncoding, response))
      }
      if (!this._requestIsStream(command) && this._responseIsStream(command)) {
        const request = req.data ? c.decode(requestEncoding, req.data) : null
        const responseStream = new RPCStream(null, null, req.createResponseStream(), responseEncoding)
        responseStream.data = request
        await this._handlers[command](responseStream)
      }
      if (this._requestIsStream(command) && !this._responseIsStream(command)) {
        const requestStream = new RPCRequestStream(req, responseEncoding, req.createRequestStream(), requestEncoding)
        const response = await this._handlers[command](requestStream)
        req.reply(c.encode(responseEncoding, response))
      }
      if (this._requestIsStream(command) && this._responseIsStream(command)) {
        const requestStream = new RPCRequestStream(req, responseEncoding, req.createRequestStream(), requestEncoding, req.createResponseStream(), responseEncoding)
        await this._handlers[command](requestStream)
      }
    })
  }

  async _call (name, args) {
    const requestEncoding = this._requestEncodings.get(name)
    const responseEncoding = this._responseEncodings.get(name)
    const request = this._rpc.request(methods.get(name))
    const encoded = c.encode(requestEncoding, args)
    request.send(encoded)
    return c.decode(responseEncoding, await request.reply())
  }

  _callSync (name, args) {
    const requestEncoding = this._requestEncodings.get(name)
    const responseEncoding = this._responseEncodings.get(name)
    const request = this._rpc.request(methods.get(name))
    if (this._requestIsSend(name)) {
      const encoded = c.encode(requestEncoding, args)
      request.send(encoded)
    }
    if (!this._requestIsStream(name) && this._responseIsStream(name)) {
      const encoded = c.encode(requestEncoding, args)
      request.send(encoded)
      return new RPCStream(request.createResponseStream(), responseEncoding)
    }
    if (this._requestIsStream(name) && !this._responseIsStream(name)) {
      return new RPCRequestStream(request, responseEncoding, null, null, request.createRequestStream(), requestEncoding)
    }
    if (this._requestIsStream(name) && this._responseIsStream(name)) {
      return new RPCRequestStream(request, responseEncoding, request.createResponseStream(), responseEncoding, request.createRequestStream(), requestEncoding)
    }
  }

  async createPreview (args) {
    return this._call('@media/create-preview', args)
  }

  onCreatePreview (responseFn) {
    this._handlers['@media/create-preview'] = responseFn
  }

  _requestIsStream (command) {
    return [
    ].includes(command)
  }

  _responseIsStream (command) {
    return [
    ].includes(command)
  }

  _requestIsSend (command) {
    return [
    ].includes(command)
  }
}

export default HRPC
