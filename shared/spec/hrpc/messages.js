// This file is autogenerated by the hyperschema compiler
// Schema Version: 2
/* eslint-disable camelcase */
/* eslint-disable quotes */

import { c } from 'hyperschema/runtime'

const VERSION = 2

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @media/dimensions
const encoding0 = {
  preencode (state, m) {
    c.uint.preencode(state, m.width)
    c.uint.preencode(state, m.height)
  },
  encode (state, m) {
    c.uint.encode(state, m.width)
    c.uint.encode(state, m.height)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const r1 = c.uint.decode(state)

    return {
      width: r0,
      height: r1
    }
  }
}

// @media/metadata.dimensions
const encoding1_1 = c.frame(encoding0)

// @media/metadata
const encoding1 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.mimetype) c.string.preencode(state, m.mimetype)
    if (m.dimensions) encoding1_1.preencode(state, m.dimensions)
    if (m.duration) c.uint.preencode(state, m.duration)
  },
  encode (state, m) {
    const flags =
      (m.mimetype ? 1 : 0) |
      (m.dimensions ? 2 : 0) |
      (m.duration ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.mimetype) c.string.encode(state, m.mimetype)
    if (m.dimensions) encoding1_1.encode(state, m.dimensions)
    if (m.duration) c.uint.encode(state, m.duration)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      mimetype: (flags & 1) !== 0 ? c.string.decode(state) : null,
      dimensions: (flags & 2) !== 0 ? encoding1_1.decode(state) : null,
      duration: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @media/file.metadata
const encoding2_0 = c.frame(encoding1)

// @media/file
const encoding2 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.metadata) encoding2_0.preencode(state, m.metadata)
    if (m.inlined) c.string.preencode(state, m.inlined)
    if (m.buffer) c.buffer.preencode(state, m.buffer)
  },
  encode (state, m) {
    const flags =
      (m.metadata ? 1 : 0) |
      (m.inlined ? 2 : 0) |
      (m.buffer ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.metadata) encoding2_0.encode(state, m.metadata)
    if (m.inlined) c.string.encode(state, m.inlined)
    if (m.buffer) c.buffer.encode(state, m.buffer)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      metadata: (flags & 1) !== 0 ? encoding2_0.decode(state) : null,
      inlined: (flags & 2) !== 0 ? c.string.decode(state) : null,
      buffer: (flags & 4) !== 0 ? c.buffer.decode(state) : null
    }
  }
}

// @media/preview-by-size.small
const encoding3_0 = c.frame(encoding2)
// @media/preview-by-size.medium
const encoding3_1 = encoding3_0
// @media/preview-by-size.large
const encoding3_2 = encoding3_0

// @media/preview-by-size
const encoding3 = {
  preencode (state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.small) encoding3_0.preencode(state, m.small)
    if (m.medium) encoding3_1.preencode(state, m.medium)
    if (m.large) encoding3_2.preencode(state, m.large)
  },
  encode (state, m) {
    const flags =
      (m.small ? 1 : 0) |
      (m.medium ? 2 : 0) |
      (m.large ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.small) encoding3_0.encode(state, m.small)
    if (m.medium) encoding3_1.encode(state, m.medium)
    if (m.large) encoding3_2.encode(state, m.large)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      small: (flags & 1) !== 0 ? encoding3_0.decode(state) : null,
      medium: (flags & 2) !== 0 ? encoding3_1.decode(state) : null,
      large: (flags & 4) !== 0 ? encoding3_2.decode(state) : null
    }
  }
}

// @media/maxSizePreview
const encoding4 = {
  preencode (state, m) {
    c.uint.preencode(state, m.small)
    c.uint.preencode(state, m.medium)
    c.uint.preencode(state, m.large)
  },
  encode (state, m) {
    c.uint.encode(state, m.small)
    c.uint.encode(state, m.medium)
    c.uint.encode(state, m.large)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.uint.decode(state)

    return {
      small: r0,
      medium: r1,
      large: r2
    }
  }
}

// @media/create-preview-request
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.path)
    c.uint.preencode(state, m.maxSize)
    state.end++ // max flag is 2 so always one byte

    if (m.mimetype) c.string.preencode(state, m.mimetype)
    if (version >= 2 && m.encoding) c.string.preencode(state, m.encoding)
  },
  encode (state, m) {
    const flags =
      (m.mimetype ? 1 : 0) |
      ((version >= 2 && m.encoding) ? 2 : 0)

    c.string.encode(state, m.path)
    c.uint.encode(state, m.maxSize)
    c.uint.encode(state, flags)

    if (m.mimetype) c.string.encode(state, m.mimetype)
    if (version >= 2 && m.encoding) c.string.encode(state, m.encoding)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      path: r0,
      maxSize: r1,
      mimetype: (flags & 1) !== 0 ? c.string.decode(state) : null,
      encoding: (version >= 2 && (flags & 2) !== 0) ? c.string.decode(state) : null
    }
  }
}

// @media/create-preview-response.metadata
const encoding6_0 = encoding2_0
// @media/create-preview-response.preview
const encoding6_1 = encoding3_0

// @media/create-preview-response
const encoding6 = {
  preencode (state, m) {
    encoding6_0.preencode(state, m.metadata)
    encoding6_1.preencode(state, m.preview)
  },
  encode (state, m) {
    encoding6_0.encode(state, m.metadata)
    encoding6_1.encode(state, m.preview)
  },
  decode (state) {
    const r0 = encoding6_0.decode(state)
    const r1 = encoding6_1.decode(state)

    return {
      metadata: r0,
      preview: r1
    }
  }
}

// @media/create-preview-all-request.maxSize
const encoding7_1 = c.frame(encoding4)

// @media/create-preview-all-request
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.path)
    encoding7_1.preencode(state, m.maxSize)
    state.end++ // max flag is 1 so always one byte

    if (m.mimetype) c.string.preencode(state, m.mimetype)
  },
  encode (state, m) {
    const flags = m.mimetype ? 1 : 0

    c.string.encode(state, m.path)
    encoding7_1.encode(state, m.maxSize)
    c.uint.encode(state, flags)

    if (m.mimetype) c.string.encode(state, m.mimetype)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = encoding7_1.decode(state)
    const flags = c.uint.decode(state)

    return {
      path: r0,
      maxSize: r1,
      mimetype: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @media/create-preview-all-response.metadata
const encoding8_0 = encoding2_0
// @media/create-preview-all-response.preview
const encoding8_1 = c.frame(encoding3)

// @media/create-preview-all-response
const encoding8 = {
  preencode (state, m) {
    encoding8_0.preencode(state, m.metadata)
    encoding8_1.preencode(state, m.preview)
  },
  encode (state, m) {
    encoding8_0.encode(state, m.metadata)
    encoding8_1.encode(state, m.preview)
  },
  decode (state) {
    const r0 = encoding8_0.decode(state)
    const r1 = encoding8_1.decode(state)

    return {
      metadata: r0,
      preview: r1
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@media/dimensions': return encoding0
    case '@media/metadata': return encoding1
    case '@media/file': return encoding2
    case '@media/preview-by-size': return encoding3
    case '@media/maxSizePreview': return encoding4
    case '@media/create-preview-request': return encoding5
    case '@media/create-preview-response': return encoding6
    case '@media/create-preview-all-request': return encoding7
    case '@media/create-preview-all-response': return encoding8
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

export { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
