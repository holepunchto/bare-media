// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

import { c } from 'hyperschema/runtime'

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @media/dimensions
const encoding0 = {
  preencode(state, m) {
    c.uint.preencode(state, m.width)
    c.uint.preencode(state, m.height)
  },
  encode(state, m) {
    c.uint.encode(state, m.width)
    c.uint.encode(state, m.height)
  },
  decode(state) {
    const r0 = c.uint.decode(state)
    const r1 = c.uint.decode(state)

    return {
      width: r0,
      height: r1
    }
  }
}

// @media/metadata.dimensions
const encoding1_1 = c.frame(encoding0)

// @media/metadata
const encoding1 = {
  preencode(state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.mimetype) c.string.preencode(state, m.mimetype)
    if (m.dimensions) encoding1_1.preencode(state, m.dimensions)
    if (m.duration) c.uint.preencode(state, m.duration)
  },
  encode(state, m) {
    const flags =
      (m.mimetype ? 1 : 0) | (m.dimensions ? 2 : 0) | (m.duration ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.mimetype) c.string.encode(state, m.mimetype)
    if (m.dimensions) encoding1_1.encode(state, m.dimensions)
    if (m.duration) c.uint.encode(state, m.duration)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      mimetype: (flags & 1) !== 0 ? c.string.decode(state) : null,
      dimensions: (flags & 2) !== 0 ? encoding1_1.decode(state) : null,
      duration: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @media/file.metadata
const encoding2_0 = c.frame(encoding1)

// @media/file
const encoding2 = {
  preencode(state, m) {
    state.end++ // max flag is 4 so always one byte

    if (m.metadata) encoding2_0.preencode(state, m.metadata)
    if (m.inlined) c.string.preencode(state, m.inlined)
    if (m.buffer) c.buffer.preencode(state, m.buffer)
  },
  encode(state, m) {
    const flags =
      (m.metadata ? 1 : 0) | (m.inlined ? 2 : 0) | (m.buffer ? 4 : 0)

    c.uint.encode(state, flags)

    if (m.metadata) encoding2_0.encode(state, m.metadata)
    if (m.inlined) c.string.encode(state, m.inlined)
    if (m.buffer) c.buffer.encode(state, m.buffer)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      metadata: (flags & 1) !== 0 ? encoding2_0.decode(state) : null,
      inlined: (flags & 2) !== 0 ? c.string.decode(state) : null,
      buffer: (flags & 4) !== 0 ? c.buffer.decode(state) : null
    }
  }
}

// @media/create-preview-request
const encoding3 = {
  preencode(state, m) {
    const flags =
      (m.path ? 1 : 0) |
      (m.httpLink ? 2 : 0) |
      (m.buffer ? 4 : 0) |
      (m.mimetype ? 8 : 0) |
      (m.maxWidth ? 16 : 0) |
      (m.maxHeight ? 32 : 0) |
      (m.maxFrames ? 64 : 0) |
      (m.maxBytes ? 128 : 0) |
      (m.format ? 256 : 0) |
      (m.encoding ? 512 : 0)

    c.uint.preencode(state, flags)

    if (m.path) c.string.preencode(state, m.path)
    if (m.httpLink) c.string.preencode(state, m.httpLink)
    if (m.buffer) c.buffer.preencode(state, m.buffer)
    if (m.mimetype) c.string.preencode(state, m.mimetype)
    if (m.maxWidth) c.uint.preencode(state, m.maxWidth)
    if (m.maxHeight) c.uint.preencode(state, m.maxHeight)
    if (m.maxFrames) c.uint.preencode(state, m.maxFrames)
    if (m.maxBytes) c.uint.preencode(state, m.maxBytes)
    if (m.format) c.string.preencode(state, m.format)
    if (m.encoding) c.string.preencode(state, m.encoding)
  },
  encode(state, m) {
    const flags =
      (m.path ? 1 : 0) |
      (m.httpLink ? 2 : 0) |
      (m.buffer ? 4 : 0) |
      (m.mimetype ? 8 : 0) |
      (m.maxWidth ? 16 : 0) |
      (m.maxHeight ? 32 : 0) |
      (m.maxFrames ? 64 : 0) |
      (m.maxBytes ? 128 : 0) |
      (m.format ? 256 : 0) |
      (m.encoding ? 512 : 0)

    c.uint.encode(state, flags)

    if (m.path) c.string.encode(state, m.path)
    if (m.httpLink) c.string.encode(state, m.httpLink)
    if (m.buffer) c.buffer.encode(state, m.buffer)
    if (m.mimetype) c.string.encode(state, m.mimetype)
    if (m.maxWidth) c.uint.encode(state, m.maxWidth)
    if (m.maxHeight) c.uint.encode(state, m.maxHeight)
    if (m.maxFrames) c.uint.encode(state, m.maxFrames)
    if (m.maxBytes) c.uint.encode(state, m.maxBytes)
    if (m.format) c.string.encode(state, m.format)
    if (m.encoding) c.string.encode(state, m.encoding)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      path: (flags & 1) !== 0 ? c.string.decode(state) : null,
      httpLink: (flags & 2) !== 0 ? c.string.decode(state) : null,
      buffer: (flags & 4) !== 0 ? c.buffer.decode(state) : null,
      mimetype: (flags & 8) !== 0 ? c.string.decode(state) : null,
      maxWidth: (flags & 16) !== 0 ? c.uint.decode(state) : 0,
      maxHeight: (flags & 32) !== 0 ? c.uint.decode(state) : 0,
      maxFrames: (flags & 64) !== 0 ? c.uint.decode(state) : 0,
      maxBytes: (flags & 128) !== 0 ? c.uint.decode(state) : 0,
      format: (flags & 256) !== 0 ? c.string.decode(state) : null,
      encoding: (flags & 512) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @media/create-preview-response.metadata
const encoding4_0 = encoding2_0
// @media/create-preview-response.preview
const encoding4_1 = c.frame(encoding2)

// @media/create-preview-response
const encoding4 = {
  preencode(state, m) {
    encoding4_0.preencode(state, m.metadata)
    encoding4_1.preencode(state, m.preview)
  },
  encode(state, m) {
    encoding4_0.encode(state, m.metadata)
    encoding4_1.encode(state, m.preview)
  },
  decode(state) {
    const r0 = encoding4_0.decode(state)
    const r1 = encoding4_1.decode(state)

    return {
      metadata: r0,
      preview: r1
    }
  }
}

// @media/decode-image-request
const encoding5 = {
  preencode(state, m) {
    state.end++ // max flag is 8 so always one byte

    if (m.path) c.string.preencode(state, m.path)
    if (m.httpLink) c.string.preencode(state, m.httpLink)
    if (m.buffer) c.buffer.preencode(state, m.buffer)
    if (m.mimetype) c.string.preencode(state, m.mimetype)
  },
  encode(state, m) {
    const flags =
      (m.path ? 1 : 0) |
      (m.httpLink ? 2 : 0) |
      (m.buffer ? 4 : 0) |
      (m.mimetype ? 8 : 0)

    c.uint.encode(state, flags)

    if (m.path) c.string.encode(state, m.path)
    if (m.httpLink) c.string.encode(state, m.httpLink)
    if (m.buffer) c.buffer.encode(state, m.buffer)
    if (m.mimetype) c.string.encode(state, m.mimetype)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      path: (flags & 1) !== 0 ? c.string.decode(state) : null,
      httpLink: (flags & 2) !== 0 ? c.string.decode(state) : null,
      buffer: (flags & 4) !== 0 ? c.buffer.decode(state) : null,
      mimetype: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @media/decode-image-response.metadata
const encoding6_0 = encoding2_0

// @media/decode-image-response
const encoding6 = {
  preencode(state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.metadata) encoding6_0.preencode(state, m.metadata)
    if (m.data) c.buffer.preencode(state, m.data)
  },
  encode(state, m) {
    const flags = (m.metadata ? 1 : 0) | (m.data ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.metadata) encoding6_0.encode(state, m.metadata)
    if (m.data) c.buffer.encode(state, m.data)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      metadata: (flags & 1) !== 0 ? encoding6_0.decode(state) : null,
      data: (flags & 2) !== 0 ? c.buffer.decode(state) : null
    }
  }
}

function setVersion(v) {
  version = v
}

function encode(name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode(name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum(name) {
  switch (name) {
    default:
      throw new Error('Enum not found ' + name)
  }
}

function getEncoding(name) {
  switch (name) {
    case '@media/dimensions':
      return encoding0
    case '@media/metadata':
      return encoding1
    case '@media/file':
      return encoding2
    case '@media/create-preview-request':
      return encoding3
    case '@media/create-preview-response':
      return encoding4
    case '@media/decode-image-request':
      return encoding5
    case '@media/decode-image-response':
      return encoding6
    default:
      throw new Error('Encoder not found ' + name)
  }
}

function getStruct(name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode(state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode(state, m) {
      version = v
      enc.encode(state, m)
    },
    decode(state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

export {
  resolveStruct,
  getStruct,
  getEnum,
  getEncoding,
  encode,
  decode,
  setVersion,
  version
}
